/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Boy01_Body_Geo: THREE.SkinnedMesh
    Boy01_Brows_Geo: THREE.SkinnedMesh
    Boy01_Eyes_Geo: THREE.SkinnedMesh
    h_Geo: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Boy01_Body_MAT: THREE.MeshStandardMaterial
    Boy01_Brows_MAT1: THREE.MeshStandardMaterial
    Boy01_Eyes_MAT1: THREE.MeshStandardMaterial
    Boy01_Mouth_MAT1: THREE.MeshStandardMaterial
  }
}

type ActionName = 'dance' | 'dance2' | 'idle'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/theboy.glb') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.Hips} />
          <skinnedMesh name="Boy01_Body_Geo" geometry={nodes.Boy01_Body_Geo.geometry} material={materials.Boy01_Body_MAT} skeleton={nodes.Boy01_Body_Geo.skeleton} />
          <skinnedMesh name="Boy01_Brows_Geo" geometry={nodes.Boy01_Brows_Geo.geometry} material={materials.Boy01_Brows_MAT1} skeleton={nodes.Boy01_Brows_Geo.skeleton} />
          <skinnedMesh name="Boy01_Eyes_Geo" geometry={nodes.Boy01_Eyes_Geo.geometry} material={materials.Boy01_Eyes_MAT1} skeleton={nodes.Boy01_Eyes_Geo.skeleton} />
          <skinnedMesh name="h_Geo" geometry={nodes.h_Geo.geometry} material={materials.Boy01_Mouth_MAT1} skeleton={nodes.h_Geo.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/theboy.glb')
